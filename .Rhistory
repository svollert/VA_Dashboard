p <- plot_ly(x = rownames(norm_data), y=colnames(norm_data), z=apply(norm_data, 2, rev), type="heatmap", colors=col, hovertemplate = paste('<i>True Value </i>: %{x}<br><i>Pred. Value </i>: %{y}<br><i>Confusion Score </i>: %{z:.3f}<extra></extra>')) %>%
add_annotations(x=anno_x, y=anno_y, text = new_data, showarrow = FALSE, font=list(color='black')) %>%
layout(xaxis = list(title = "True Value"), yaxis = list(title = "Pred. Value"), font=t)
p
})
# Ausgabe Heatmap, wobei der zuvor erstellten Plotlyplot verwendet wird
output$heatmap <- renderPlotly({heatmapplot()})
# Die Daten werden f?r das Delta-Heatmap vorbereitet
heatmapplot_comparison <- reactive({
if(is.null(input$models)) {return()}
if(input$valueswitch == TRUE) {
data <- round(comparisondata_percentage(),3)
} else {
data <- comparisondata()
}
classes <- selected_classes()
rownames(data) <- c(classes, paste(classes, classes))
colnames(data) <- rev(classes)
norm_data <- as.matrix(data)
data_def <- as.matrix(norm_data[1:ncol(data),])
data_comp <- as.matrix(norm_data[(ncol(data)+1):(2*ncol(data)),])
norm_data <- data_def - data_comp
norm_data <- as.data.frame(norm_data)
rownames(norm_data) <- classes
colnames(norm_data) <- rev(classes)
norm_data <- as.matrix(norm_data)
norm_data <- round(norm_data, 3)
abs_norm_data <- data.frame(lapply(norm_data, as.character), stringsAsFactors=FALSE)
abs_norm_data <- as.matrix(abs_norm_data)
max_element <- max(norm_data)
min_element <- min(norm_data)
if (min(norm_data) < 0) {
if (abs(max_element) >= abs(min_element)) {
min_element = max_element * (-1)
} else {
max_element = min_element * (-1)
}
norm_data[norm_data >= 0] <- ((norm_data[norm_data >= 0])/max_element)
norm_data[norm_data < 0] <- ((norm_data[norm_data < 0])/min_element)*(-1)
} else {
if ((min_element != 0) && (max_element != 0)) {
norm_data <- (norm_data - min_element)/(max_element - min_element)
}
}
diag(norm_data) <- diag(norm_data) * (-1)
anno_x <- NULL
anno_y <- NULL
for (i in 1:(ncol(data))) {
for (j in 1:(ncol(data))) {
anno_x <- append(anno_x, classes[i])
}
}
for (i in 1:(ncol(data))) {
for (j in 1:(ncol(data))) {
anno_y <- append(anno_y, classes[j])
}
}
# Farbskala mit sechs Abstufungen von Rot und sechs Abstufungen von Gr?n
col_red <- rev(brewer.pal(n = 9, name = 'Reds'))
col_red <- col_red[-(7:9)]
col_white <- "#FFFFFF"
col_green <- brewer.pal(n = 9, name = 'Greens')
col_green <- col_green[-(1:3)]
col <- c(col_red, col_white, col_green)
t <- list(
size = input$fontsize)
p <- plot_ly(x = rownames(norm_data), y=colnames(norm_data), z=apply(norm_data, 2, rev), type="heatmap",
colors = col, zauto = F, zmin = -1, zmax = 1, hovertemplate = paste('<i>True Value </i>: %{x}', '<br><i>Pred. Value </i>: %{y}', '<br><i>Comp. Index </i>: %{z:.3f}<extra></extra>')) %>%
add_annotations(x=anno_x, y=anno_y, text = abs_norm_data, showarrow = FALSE, font=list(color='black')) %>%
layout(xaxis = list(title = "True Value"), yaxis = list(title = "Pred. Value"), font=t)
p
})
# Ausgabe Delta-Heatmap, wobei der zuvor erstellten Plotlyplot verwendet wird
output$heatmap_comparison <- renderPlotly({heatmapplot_comparison()})
chorddiagrammplot <- reactive({
if(length(input$models) == 0){return()}
model <- match(input$detailedmodel,input$models)
print(model)
if(input$valueswitch == TRUE){
cm <- selected_models_missclassified_percentage()}
else{
cm <- selected_models_missclassified()}
cm <- cm[(model*ncol(cm)-(ncol(cm)-1)):(model*ncol(cm)),]
cm <- t(as.matrix(cm))
ticks <- round(max(colSums(cm))/40, 2)
if(input$valueswitch == FALSE){
ticks <- trunc(ticks / 10) * 10
if(ticks == 0){
ticks <- 1
}
}
if(ticks == 0.00 && input$valueswitch == TRUE){
ticks <- 0.002
}
rownames(cm) <- selected_classes()
colnames(cm) <- rownames(cm)
if(input$valueswitch == TRUE){
cm <- round(cm,4)
}
print(input$fontsize)
chorddiag(cm, type = "directional", showTicks = T, tickInterval = ticks, groupnameFontsize = input$fontsize, ticklabelFontsize = as.numeric(input$fontsize)-2, groupnamePadding = 30, groupPadding = 3, margin = 50, groupColors = unname(plotcolors()))
})
output$chorddiagramm <- renderChorddiag({chorddiagrammplot()})
sankeyplot <- reactive({
if(length(input$models) == 0){return()}
model <- match(input$detailedmodel,input$models)
cm <- selected_models()
cm <- cm[(model*ncol(cm)-(ncol(cm)-1)):(model*ncol(cm)),]
# Anzahl Klassen aus Konfusionsmatrix ermitteln
no_classes <- ncol(cm)
# Anzahl Modelle aus Konfusionsmatrix ermitteln
no_models <- length(input$models)
cm_used_model <- selected_models() # 1 ist abh?ngig vom ausgewÃÂ¤hlten Modell
cm_used_model <- cm_used_model[(model*ncol(cm_used_model)-(ncol(cm_used_model)-1)):(model*ncol(cm_used_model)),]
id <- c(1:(2*no_classes))
labels <- selected_classes()
labels <- append(labels, selected_classes())
cm_model_totals <- colSums(cm_used_model) # Gesamtanzahl der jeweiligen Klassen ermitteln
cm_model_totals <- append(cm_model_totals, cm_model_totals)
# Farben
#col <- distinctColorPalette(no_classes, altCol=T)
col <- unname(plotcolors()[1:no_classes])
col <- append(col, col)
# Gewichtete Knoten erstellen
nodes <- as.data.frame(cbind(id, labels, cm_model_totals, col), stringsAsFactors = FALSE)
colnames(nodes) <- c("id","label","weight", "color")
rownames(nodes) <- c(1:(2*no_classes))
nodes$id <- as.numeric(nodes$id)
nodes$weight <- as.numeric(nodes$weight)
# EintrÃÂ¤ge auf der Diagonalen der Konfusionsmatrix werden auf 0 gesetzt
diag(cm_used_model) <- 0
colnames(cm_used_model) <- c(1:no_classes)
rownames(cm_used_model) <- c(1:no_classes)
cm_used_model <- data.matrix(cm_used_model)
# Gewichtete Kanten erstellen
g <- graph.adjacency(cm_used_model, weighted=TRUE)
edges <- get.data.frame(g)
colnames(edges) <- c("to","from","weight")
edges$to <- as.numeric(edges$to) + (ncol(selected_models_missclassified()) -1)
edges$from <- as.numeric(edges$from) - 1
edges <- transform(edges, color = col[from +1])
edges <- edges[c("from", "to", "weight", "color")]
edges <- transform(edges, label = paste("Class", to - (ncol(selected_models_missclassified()) -1)))
#edges <- edges[order(edges$from),]   # Sortierung bringt nichts in Darstellung
p <- plot_ly(
type = "sankey",
domain = list(
x =  c(0,1),
y =  c(0,1)
),
orientation = "h",
valueformat = ".0f",
valuesuffix = " missclassified",
node = list(
label = nodes$label,
color = nodes$color,
pad = 15,
thickness = 15,
line = list(
color = "black",
width = 0.5
)
),
link = list(
source = edges$from,
target = edges$to,
value =  edges$weight
)
) %>%
layout(
title = "Sankey Diagram for Missclassification per Class",
font = list(
size = input$fontsize
),
xaxis = list(showgrid = F, zeroline = F),
yaxis = list(showgrid = F, zeroline = F)
)
p
})
output$sankey <- renderPlotly({sankeyplot()})
networkplot <- reactive({
return()
# cm <- selected_models_missclassified()
#
# # Anzahl Klassen aus Konfusionsmatrix ermitteln
# no_classes <- ncol(cm)
# # Anzahl Modelle aus Konfusionsmatrix ermitteln
# no_models <- length(input$models)
#
# # Nodes
# class_labels <- selected_classes()
# class_totals_missclassified <- colSums(cm)
# nodes <- as.data.frame(cbind(class_labels, cm_totals_missclassified), stringsAsFactors = FALSE)
# colnames(nodes) <- c("label","weight")
# rownames(nodes) <- c(1:no_classes)
# nodes$weight <- as.numeric(nodes$weight)
#
# # Farben
# col <- distinctColorPalette(no_classes, altCol=T)
# col <- append(col, col)
#
# # EintrÃÂ¤ge auf der Diagonalen der Konfusionsmatrix werden auf 0 gesetzt
# colnames(cm) <- c(1:no_classes)
# rownames(cm_used_model) <- c(1:no_classes)
# cm_used_model <- data.matrix(cm_used_model)
#
# # Gewichtete Kanten erstellen
# g <- graph.adjacency(cm_used_model, weighted=TRUE)
# edges <- get.data.frame(g)
# colnames(edges) <- c("to","from","weight")
# edges$to <- as.numeric(edges$to) + (ncol(selected_models_missclassified()) -1)
# edges$from <- as.numeric(edges$from) - 1
# edges <- transform(edges, color = col[from +1])
# edges <- edges[c("from", "to", "weight", "color")]
# edges <- transform(edges, label = paste("Class", to - (ncol(selected_models_missclassified()) -1)))
# #edges <- edges[order(edges$from),]   # Sortierung bringt nichts in Darstellung
})
output$network_plot <- renderPlotly({networkplot()})
output$sunburst_data2 <- renderTable(sunburst_data())
output$selected_models <- renderText(selected_models())
lorenzplot <- reactive({
if(is.null(data())){return ()}
data <- selected_models()
counts <- colSums(data)
classes <- selected_classes()
data <- as.data.frame(counts)
data$names <- selected_classes()
colnames(data) <- c("Count", "Class")
newdata <- data[order(data$Count),]
Sum <- cumsum(as.vector(newdata$Count))
newdata$Sum <- Sum / length(input$models)
xform <- list(categoryorder = "array",
categoryarray = newdata$Sum)
b <- list(
range = c(newdata$Class[1], newdata$Class[length(classes)])
)
t <- list(
size = input$fontsize)
p <- plot_ly(newdata, x = ~Class, y = ~Sum, type = 'scatter', mode = "lines", name = "Value") %>% layout(xaxis = xform) %>%
add_trace(y = seq((sum(selected_models())/ncol(selected_models()))/length(input$models),sum(selected_models())/length(input$models), (sum(selected_models())/ncol(selected_models()))/length(input$models)), name = 'Uniform Distribution',mode = 'lines') %>%
layout(xaxis = b, font=t)
p
})
output$lorenzcurve <- renderPlotly({lorenzplot()})
calculate_gini <- reactive({
data <- selected_models()
counts <- colSums(data)
classes <- selected_classes()
data <- as.data.frame(counts)
data$names <- selected_classes()
colnames(data) <- c("Count", "Class")
newdata <- data[order(data$Count),]
gini_score <- round(Gini(newdata$Count), 4)
gini_score
})
histogramplot <- reactive({
data <- selected_models()
counts <- colSums(data) / length(input$models)
classes <- selected_classes()
t <- list(
size = input$fontsize)
p <- plot_ly() %>%
add_trace(y=counts, x=classes, type = "bar", name = "Value") %>%
add_trace(x = classes, y = (sum(data)/ncol(data))/length(input$models), type = "scatter", mode = "lines", name = "Mean") %>%
layout(font=t)
p
})
output$histogram <- renderPlotly({histogramplot()})
treemapplot <- reactive({
if(length(input$models) == 0){return()}
model <- match(input$detailedmodel,input$models)
if(input$valueswitch == TRUE){
data <- selected_models_missclassified_percentage()}
else{
data <- selected_models_missclassified()}
cm <- data
cm <- cm[(model*ncol(cm)-(ncol(cm)-1)):(model*ncol(cm)),]
labels <- c("All")
parents <- c("")
values <- sum(cm)
labels <- c(labels, colnames(cm))
parents <- c(parents, rep("All", ncol(cm)))
values <- c(values, colSums(cm))
labels <- c(labels, paste(rep(colnames(cm), each=ncol(cm)), "-->", colnames(cm)))
parents <- c(parents, rep(colnames(cm), each=ncol(cm)))
values <- c(values, unlist(cm))
id_null <- which(values == 0)
labels <- labels[-id_null]
parents <- parents[-id_null]
values <- values[-id_null]
library(plotly)
fig <- plot_ly(
type="treemap",
labels=labels,
parents = parents,
values = values,
branchvalues = "total",
textinfo = "label+value"
)
fig
})
output$treemap <- renderPlotly({treemapplot()})
errorlineplot <- reactive({
if(is.null(input$models)){return()}
data <- selected_models()
missclassified_data <- selected_models_missclassified()
chunk <- ncol(data)
n <- nrow(data)
r  <- rep(1:length(input$models),each=chunk)[1:n]
d <- split(data,r)
d_miss <- split(missclassified_data, r)
e <- c()
f <- c()
for(i in seq(1, length(d))){
e <- c(e, sum(unlist(d[i])))
f <- c(f, sum(unlist(d_miss[i])))
}
acc <- (e-f)/e
average_acc <- mean(acc)
models <- input$models
recall <- boxplot_calculation()
recall <- recall[(1+nrow(data)):(2*nrow(data)),1]
macro_avg_recall <- colMeans(matrix(recall, ncol(data)))
t <- list(
size = input$fontsize)
p <- plot_ly(x = models, y = acc, type = 'scatter', mode = 'lines+markers', name = "Model Accuracy", hovertemplate = paste('<i>Model: </i> %{x}<br><i>Model Accuracy</i>: %{y:.4p}<extra></extra>')) %>%
add_trace(x = models, y = macro_avg_recall, type = "scatter", mode = "lines+markers", name = "Macro-Avg. Recall", hovertemplate = paste('<i>Model: </i> %{x}<br><i>Macro-Avg. Recall</i>: %{y:.4p}<extra></extra>')) %>%
add_trace(x = models, y = average_acc, type = "scatter", mode = "lines", name = "Avg. Accuracy", hovertemplate = paste('<i>Avg. Accuracy</i>: %{y:.4p}<extra></extra>')) %>%
add_trace(x = models, y = max(colSums(data)) / sum(data), type = "scatter", mode = "lines", name = "Baseline Accuracy", hovertemplate = paste('<i>Baseline Accuracy</i>: %{y:.4p}<extra></extra>')) %>%
add_trace(x = models, y = 1/ncol(data), type = "scatter", mode = "lines", name = "Random Accuracy", hovertemplate = paste('<i>Random Accuracy</i>: %{y:.4p}<extra></extra>')) %>%
layout(xaxis = list(tickvals = models, tickmode = "array"), font=t)
})
output$errorline <- renderPlotly({errorlineplot()})
boxplot_calculation <- reactive({
if(is.null(input$models)){return()}
cm <- selected_models()
cm_col <- vector(mode="numeric")
for(i in seq(1, length(input$models))) {
cm_col <- append(cm_col, colSums(cm[((i*ncol(cm))-(ncol(cm)-1)):(((i*ncol(cm))-(ncol(cm)-1))+(ncol(cm)-1)),]))
}
cm_row <- rowSums(cm)
precision <- cm/cm_row
recall <- cm/cm_col
f1 <- 2 * ((precision * recall) / (precision+recall))
results <- data.frame(Score = numeric(), Model = numeric(), Metric = character(), stringsAsFactors = FALSE)
for(i in seq(1,length(input$models))) {
vector_score <- vector(mode="numeric")
vector_model <- vector(mode="character")
vector_metric <- vector(mode="character")
for(j in seq(1,ncol(cm))) {
vector_score <- append(vector_score, round(precision[((i*ncol(cm))-(ncol(cm)-1))+(j-1),j], digits=4))
vector_model <- append(vector_model, as.character(input$models[i]))
vector_metric <- append(vector_metric, "Precision")
}
vector_score[is.nan(vector_score)] <- 0
df_model <- data.frame(Score = vector_score, Model = vector_model, Metric = vector_metric, stringsAsFactors = FALSE)
results <- rbind(results, df_model)
}
for(i in seq(1,length(input$models))) {
vector_score <- vector(mode="numeric")
vector_model <- vector(mode="character")
vector_metric <- vector(mode="character")
for(j in seq(1,ncol(cm))) {
vector_score <- append(vector_score, round(recall[((i*ncol(cm))-(ncol(cm)-1))+(j-1),j], digits=4))
vector_model <- append(vector_model, as.character(input$models[i]))
vector_metric <- append(vector_metric, "Recall")
}
vector_score[is.nan(vector_score)] <- 0
df_model <- data.frame(Score = vector_score, Model = vector_model, Metric = vector_metric, stringsAsFactors = FALSE)
results <- rbind(results, df_model)
}
for(i in seq(1,length(input$models))) {
vector_score <- vector(mode="numeric")
vector_model <- vector(mode="character")
vector_metric <- vector(mode="character")
for(j in seq(1,ncol(cm))) {
vector_score <- append(vector_score, round(f1[((i*ncol(cm))-(ncol(cm)-1))+(j-1),j], digits=4))
vector_model <- append(vector_model, as.character(input$models[i]))
vector_metric <- append(vector_metric, "F1-Score")
}
vector_score[is.nan(vector_score)] <- 0
df_model <- data.frame(Score = vector_score, Model = vector_model, Metric = vector_metric, stringsAsFactors = FALSE)
results <- rbind(results, df_model)
}
results
})
boxplotplot <- reactive({
if(is.null(input$models)){return()}
t <- list(
size = input$fontsize)
results <- boxplot_calculation()
p <- plot_ly(results, y = ~Score, x = ~Model, color=~Metric, type = "box") %>%
layout(boxmode = "group", yaxis = list(title = "Score over all classes"), xaxis = list(tickvals = input$models, tickmode = "array"), font=t)
p
})
output$boxplot <- renderPlotly({boxplotplot()})
acc_std_plot <- reactive({
if(is.null(input$models) || length(input$models) != (nrow(selected_models()) / ncol(selected_models()))){return()}
data <- selected_models()
missclassified_data <- selected_models_missclassified()
chunk <- ncol(data)
n <- nrow(data)
r  <- rep(1:length(input$models),each=chunk)[1:n]
d <- split(data,r)
d_miss <- split(missclassified_data, r)
e <- c()
f <- c()
for(i in seq(1, length(d))){
e <- c(e, sum(unlist(d[i])))
f <- c(f, sum(unlist(d_miss[i])))
}
acc <- (e-f)/e
recall <- boxplot_calculation()
recall <- recall[(1+nrow(data)):(2*nrow(data)),1]
recallsd <- colSds(matrix(recall, ncol(data)))
x <- list(
title = "Standard deviation of recalls"
)
y <- list(
title = "Model Accuracy"
)
t <- list(
size = input$fontsize)
modelnames <- factor(input$models, levels = input$models)
p <- plot_ly(x = recallsd, y = acc, type = "scatter", mode = "markers", color = modelnames, colors = unname(plotcolors()[1:length(input$models)]), marker = list(size = 12), hovertemplate = paste('<i>Accuracy</i>: %{y:.4p}', '<br><i>Std</i>: %{x:.4p}'))%>%
layout(xaxis = x, yaxis = y, font=t)
p
})
output$acc_std_plot <- renderPlotly({acc_std_plot()})
## Plot fÃ¼r den Modellrank nach Formel im Paper
output$model_rank_plot <- renderPlotly({
if(is.null(input$models) || length(input$models) != (nrow(selected_models()) / ncol(selected_models()))){return()}
data <- selected_models()
recall <- boxplot_calculation()
recall <- recall[(1+nrow(data)):(2*nrow(data)),1]
macro_avg_recall_model <- colMeans(matrix(recall, ncol(data)))
macro_avg_recall <- rep(macro_avg_recall_model, each=ncol(data))
ci <- abs(recall-macro_avg_recall)
ci <- colSums(matrix(ci, nrow=ncol(data)))
ci_avg <- ci/ncol(data)
ci_avg <- normalize(ci_avg, range=c(0,1), method="range")
accuracy_model <- normalize(macro_avg_recall_model, range=c(0,1), method="range")
ci_prime <- 1 - ci_avg
m_rank <- 0.5*abs(accuracy_model + ci_prime)
knn_train <- c(max(m_rank), median(m_rank), min(m_rank))
knn_label <- as.factor(c("Good", "Medium", "Weak"))
data <- data.frame(input$models, m_rank)
data <- data[order(-data$m_rank),]
classifier_knn = knn(train = as.data.frame(knn_train), test=as.data.frame(data$m_rank) ,cl=knn_label, k=1)
data$label <- classifier_knn
y <- list(
title = "Model Rank" #,
#      titlefont = f
)
t <- list(
size = input$fontsize)
plot_ly(x=data$input.models, y=data$m_rank, type="bar", color = data$label, colors = c("#006D2C", "Orange", "#A50F15"), hovertemplate = paste('<i>Model</i>: %{x}', '<br><i>Score</i>: %{y:.4f}')) %>%
layout(yaxis = y, xaxis = list(tickvals = data$input.models, tickmode = "array"), font=t)
})
observeEvent(modelnames(), {
available_models <- modelnames()
updatePickerInput(session, "models", choices = available_models, selected = available_models)
})
observeEvent(input$models, {
available_models <- input$models
updatePickerInput(session, "defaultmodel", choices = available_models, selected = available_models[1])
})
observeEvent(input$models, {
available_models <- input$models
updatePickerInput(session, "comparingmodel", choices = available_models, selected = available_models[2])
})
observeEvent(modelnames(), {
available_models <- modelnames()
updatePickerInput(session, "detailedmodel", choices = available_models, selected = available_models[1])
})
observeEvent(data(), {
available_classes <- classnames()
updatePickerInput(session, "classes", choices = available_classes , selected = NULL)
})
observeEvent(data(), { # Nach Dataupload und bei Start -> Alle Modelle ausgew?hlt
available_models <- modelnames()
disabled_choices <- available_models %in% input$models
updatePickerInput(session, "models",
choices = available_models,
selected = available_models)
}, ignoreNULL = FALSE)
observeEvent(input$models, {
if(input$detailedmodel %in% input$models){
selected_detail_model <- input$detailedmodel
}
else{
selected_detail_model <- input$models[1]
}
updatePickerInput(session, "detailedmodel",
selected = selected_detail_model,
choices = input$models)
})
output$sum <- renderTable({
if(is.null(data())){return ()}
summary(data())
})
output$model_comparison_table <- DT::renderDataTable({
if(is.null(data())){return ()}
comparisondata()
})
output$table <- DT::renderDataTable({
if(is.null(data())){return ()}
#data()[1:10,]
selected_models()
}, filter = "top")
}
shiny::shinyApp(ui, server)
